# tpl2x package Makefile

SHELL       = /bin/bash
CFG         = .env
GO         ?= go
SOURCES    ?= *.go */*.go */*/*.go

CODECOV_KEY =

define CONFIG_DEF
# ------------------------------------------------------------------------------
# tpl2x config file, generated by make $(CFG)

# codecov.io API key
CODECOV_KEY=$(CODECOV_KEY)
endef
export CONFIG_DEF

# ------------------------------------------------------------------------------

-include $(CFG)
export

.PHONY: gen

# ------------------------------------------------------------------------------

## generate embedded filesystems for tests
gen: samplefs/resource.go gin-tpl2x/samplefs/resource.go

# internal target
samplefs/resource.go: $(shell find testdata)
	@pushd $(@D) ; \
	go generate ; \
	popd

# internal target
gin-tpl2x/samplefs/resource.go: $(shell find gin-tpl2x/testdata | sed -E 's/:/\\:/')
	@pushd $(@D) ; \
	go generate ; \
	popd

# ------------------------------------------------------------------------------

## run tests and fill coverage.out
cov: coverage.out

# internal target
coverage.out: $(SOURCES)
	$(GO) test -race -coverprofile=$@ -covermode=atomic ./...

#	grep -v "mode: " gin-tpl2x/$@ >> $@

# gin-tpl2x/coverage.out

# internal target
gin-tpl2x/coverage.out: gin-tpl2x/*.go
	pushd gin-tpl2x ; \
	$(GO) test -race -coverprofile=coverage.out -covermode=atomic ; \
	popd

## make coverage.out and send it to codecov.io
cov-push: cov
	bash <(curl -s https://codecov.io/bash) -t $(CODECOV_KEY)

## open browser with coverage report
cov-html: cov
	$(GO) tool cover -html=coverage.out

cov-clean:
	rm -f coverage.out
	rm -f gin-tpl2x/coverage.out

# ------------------------------------------------------------------------------

## create initial config
$(CFG):
	@[ -f $@ ] || { echo "$$CONFIG_DEF" > $@ ; echo "Warning: Created default $@" ; }

# ------------------------------------------------------------------------------

## List Makefile targets
help:
	@grep -A 1 "^##" Makefile | less

##
## Press 'q' for exit
##
